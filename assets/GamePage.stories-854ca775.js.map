{"version":3,"file":"GamePage.stories-854ca775.js","sources":["../../src/constants/index.tsx","../../src/lib/API.ts","../../src/pages/GamePage/GamePage.tsx","../../src/pages/GamePage/GamePage.stories.tsx"],"sourcesContent":["const isDev = process.env.NODE_ENV !== 'development';\n\nexport const WORDS_API: string = isDev\n  ? '/words'\n  : 'https://random-word-api.herokuapp.com/all';\nexport const WORD_API: string = isDev\n  ? '/word'\n  : 'https://random-word-api.herokuapp.com/word?length=5';\n","export default class API {\n  get(url: RequestInfo | URL, options?: any) {\n    return fetch(url, {\n      ...options,\n    });\n  }\n\n  post(url: RequestInfo | URL, options?: any) {\n    return fetch(url, {\n      method: 'POST',\n      ...options,\n    });\n  }\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport LetterGrid from '../../components/LetterGrid';\nimport WordInput from '../../components/WordInput';\nimport { WORDS_API } from '../../constants';\nimport API from '../../lib/API';\nimport { TColor, TLine } from '../../typings';\n\nconst api = new API();\n\nexport const GamePage = () => {\n  // List of all possible words\n  const [wordlist, setWordlist] = useState<string[]>([]);\n  // Word to be guessed\n  const [solution, setSolution] = useState<string>('');\n  // Length of word being guessed\n  const wordLen: number = 5;\n  // How many attempts are they allowed\n  const attempts: number = 6;\n  // Current attempt\n  const [guess, setGuess] = useState<string>('');\n  // All attempts\n  const [lines, setLines] = useState<Array<TLine>>([]);\n  // Whether or not game is complete\n  const [isGameComplete, setIsGameComplete] = useState<boolean>(false);\n\n  const getRandomWord = () => {\n    const randomInt = Math.floor(Math.random() * wordlist.length);\n    const newWord = wordlist[randomInt];\n    if (newWord) {\n      setSolution(newWord);\n    }\n  };\n\n  /**\n   * Get word list and choose random word\n   */\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const getWords = async () => {\n      const response = await api\n        .get(WORDS_API, {\n          signal: controller.signal,\n        })\n        .then((res) => res.json());\n      const randomInt = Math.floor(Math.random() * response.length);\n\n      setWordlist(response);\n      setSolution(response[randomInt]);\n    };\n\n    getWords();\n\n    return () => controller?.abort();\n  }, []);\n\n  /**\n   * Converts a word into UI friendly tile objects\n   * @param {String} word to convert to tiles\n   */\n  const convertToLetters = useCallback(\n    (word: string) => {\n      const solutionCharArr = solution.split('');\n      const wordCharArr = word.split('');\n\n      const newLine: TLine = wordCharArr.map((letter, idx) => {\n        let color: TColor = 'base';\n\n        if (letter === solutionCharArr[idx]) {\n          // Answer revealed early\n          if (isGameComplete) {\n            color = 'info';\n          } else {\n            color = 'success';\n          }\n        } else if (solution.indexOf(letter) >= 0) {\n          color = 'warning';\n        } else {\n          color = 'neutral';\n        }\n\n        return {\n          char: letter,\n          color: color,\n        };\n      });\n\n      if (newLine.length) {\n        setLines((prevLines) => [...prevLines, newLine]);\n      }\n    },\n    [solution, isGameComplete]\n  );\n\n  useEffect(() => {\n    if (\n      solution.length > 0 &&\n      (lines.length === attempts || guess === solution)\n    ) {\n      setIsGameComplete(true);\n    }\n  }, [guess, lines, solution]);\n\n  const onGuess = (val: string) => {\n    // Verify word exists in dictionary\n    if (wordlist.indexOf(val) >= 0) {\n      // And word is the desired length\n      if (val.length === wordLen) {\n        setGuess(val);\n        convertToLetters(val);\n      } else {\n        alert(`${val} is the wrong length.`);\n      }\n    }\n    // User entered an unknown word\n    else {\n      alert(`${val} isn't in our list of accepted words.`);\n    }\n  };\n\n  const onRevealAnswer = () => {\n    setIsGameComplete(true);\n    setGuess(solution);\n  };\n\n  const onRestart = () => {\n    // window.location.reload();\n    setGuess('');\n    setLines([]);\n    setIsGameComplete(false);\n    getRandomWord();\n  };\n\n  return (\n    <div className='max-w-lg mx-auto p-8 space-y-4 flex flex-col justify-center'>\n      <WordInput onGuess={onGuess} disabled={isGameComplete} />\n      <LetterGrid lines={lines} cols={wordLen} rows={attempts} />\n\n      {isGameComplete ? (\n        <>\n          <p className='text-center'>Solution: {solution}</p>\n          <button className='btn btn-secondary' onClick={onRestart}>\n            Restart\n          </button>\n        </>\n      ) : (\n        <button className='btn btn-primary' onClick={onRevealAnswer}>\n          Show Solution\n        </button>\n      )}\n    </div>\n  );\n};\n","import { Meta } from '@storybook/react';\nimport { GamePage } from './GamePage';\nexport default ({\n  title: 'Pages/Wordle',\n  component: GamePage\n} as Meta);\nexport const Default = {\n  args: {}\n};\nDefault.parameters = {\n  ...Default.parameters,\n  storySource: {\n    source: \"{\\n  args: {}\\n}\",\n    ...Default.parameters?.storySource\n  }\n};"],"names":["WORDS_API","API","url","options","api","GamePage","wordlist","setWordlist","useState","solution","setSolution","wordLen","attempts","guess","setGuess","lines","setLines","isGameComplete","setIsGameComplete","getRandomWord","randomInt","newWord","useEffect","controller","response","res","convertToLetters","useCallback","word","solutionCharArr","newLine","letter","idx","color","prevLines","jsxs","jsx","WordInput","val","LetterGrid","Fragment","GamePage_stories","Default","_a"],"mappings":"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"}